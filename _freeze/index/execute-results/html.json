{
  "hash": "934e66f3525d157b7069a479f4f0582f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nbread-crumbs: false\n---\n\n\n\n\n# Preface {.unnumbered}\n\nThis is a Quarto book.\n\n## Standard Python df rendering\n\n::: {#47881bb5 .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport pandas as pd\ndf = pd.read_csv('./resources/gt_input.csv')\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cat</th>\n      <th>Field 1</th>\n      <th>Field 2</th>\n      <th>Field 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>Lorem</td>\n      <td>1236</td>\n      <td>2535.26000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>Ipsum</td>\n      <td>50478</td>\n      <td>235.89000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C</td>\n      <td>Solat</td>\n      <td>2521</td>\n      <td>5789.56569</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Rendering applying some function and style\n\n::: {#d2c5a290 .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nimport pandas as pd\n\n# Function for formatting numbers in Italian format\ndef italian_format(x):\n    if isinstance(x, float):\n        return \"{:,.2f}\".format(x).replace(\",\", \"X\").replace(\".\", \",\").replace(\"X\", \".\")\n    elif isinstance(x, int):\n        return \"{:,}\".format(x).replace(\",\", \".\")\n    else:\n        return x\n\n# To check if column is numeric\ndef is_numeric_column(col):\n    return pd.api.types.is_numeric_dtype(col)\n\n# To have Italian format for numbers and right alignment\ndef apply_italian_style(df):\n    styled_df = df.style.format(italian_format).hide(axis=\"index\")\n    styled_df = styled_df.apply(lambda x: [\"text-align: right\" if is_numeric_column(df[x.name]) else \"\" for i in x], axis=0)\n    return styled_df\n\n# sample dataframe\ndf = pd.read_csv('./resources/gt_input.csv')\n\nstyled_df = apply_italian_style(df)\nstyled_df\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<style type=\"text/css\">\n#T_05443_row0_col2, #T_05443_row0_col3, #T_05443_row1_col2, #T_05443_row1_col3, #T_05443_row2_col2, #T_05443_row2_col3 {\n  text-align: right;\n}\n</style>\n<table id=\"T_05443\">\n  <thead>\n    <tr>\n      <th id=\"T_05443_level0_col0\" class=\"col_heading level0 col0\" >Cat</th>\n      <th id=\"T_05443_level0_col1\" class=\"col_heading level0 col1\" >Field 1</th>\n      <th id=\"T_05443_level0_col2\" class=\"col_heading level0 col2\" >Field 2</th>\n      <th id=\"T_05443_level0_col3\" class=\"col_heading level0 col3\" >Field 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_05443_row0_col0\" class=\"data row0 col0\" >A</td>\n      <td id=\"T_05443_row0_col1\" class=\"data row0 col1\" >Lorem</td>\n      <td id=\"T_05443_row0_col2\" class=\"data row0 col2\" >1.236</td>\n      <td id=\"T_05443_row0_col3\" class=\"data row0 col3\" >2.535,26</td>\n    </tr>\n    <tr>\n      <td id=\"T_05443_row1_col0\" class=\"data row1 col0\" >B</td>\n      <td id=\"T_05443_row1_col1\" class=\"data row1 col1\" >Ipsum</td>\n      <td id=\"T_05443_row1_col2\" class=\"data row1 col2\" >50.478</td>\n      <td id=\"T_05443_row1_col3\" class=\"data row1 col3\" >235,89</td>\n    </tr>\n    <tr>\n      <td id=\"T_05443_row2_col0\" class=\"data row2 col0\" >C</td>\n      <td id=\"T_05443_row2_col1\" class=\"data row2 col1\" >Solat</td>\n      <td id=\"T_05443_row2_col2\" class=\"data row2 col2\" >2.521</td>\n      <td id=\"T_05443_row2_col3\" class=\"data row2 col3\" >5.789,57</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Observable table\n\n\n\n\n```{ojs}\n//| code-fold: true\n//| tbl-cap: \"Table from Observable\"\n//| label: tbl-observable\ndata = FileAttachment(\"resources/gt_input.csv\").csv({ typed: true })\nInputs.table(data,{ locale: \"it-IT\" })\n```\n\n\n\n\n## HTML table\n\nIf you want to add a caption to an HTML table, you can put the table in a div and assign it a label (below it's `#tbl-html`), and finally insert the caption after the table.<br>\nIf you want to add a bootstrap class, just do it in the HTML itself.<br>\nBelow is an example with both applied.\n\n:::{#tbl-html .column-page-inset-right}\n\n\n\n\n```{=html}\n<table class=\"table-striped\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John Doe</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Jane Smith</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Emily Johnson</td>\n    <td>40</td>\n  </tr>\n</table>\n```\n\n\n\n\nMy html table caption\n\n:::\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}